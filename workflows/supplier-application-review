<?xml version="1.0"?>

<workflow-definition
	xmlns="urn:liferay.com:liferay-workflow_7.4.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="urn:liferay.com:liferay-workflow_7.4.0 http://www.liferay.com/dtd/liferay-workflow-definition_7_4_0.xsd"
>
	<version>117</version>
	<condition>
		<name>Organisation Error Check</name>
		<metadata>
			<![CDATA[
				{
					"xy": [
						747,
						248
					]
				}
			]]>
		</metadata>
		<script>
			<![CDATA[
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.dynamic.data.mapping.model.DDMFormInstanceRecordVersion;
import com.liferay.dynamic.data.mapping.service.DDMFormInstanceRecordVersionLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

final Log logger = LogFactoryUtil.getLog("Supplier Application Review - Organisation Error Check");

final long recVerId = GetterUtil.getLong((String)workflowContext.get(WorkflowConstants.CONTEXT_ENTRY_CLASS_PK));
final DDMFormInstanceRecordVersion recVer = DDMFormInstanceRecordVersionLocalServiceUtil.getFormInstanceRecordVersion(recVerId);
final long workflowStatus = recVer.getStatus();

if (workflowStatus == WorkflowConstants.STATUS_INCOMPLETE || workflowStatus == WorkflowConstants.STATUS_DENIED)
{
    returnValue = "Error";
} else {
    returnValue =  "Continue"
}

logger.info("returnValue is " + returnValue);]]>
		</script>
		<script-language>groovy</script-language>
		<transitions>
			<transition>
				<name>Continue</name>
				<target>Process Documents</target>
				<default>true</default>
			</transition>
			<transition>
				<name>Error</name>
				<target>Report Error</target>
				<default>false</default>
			</transition>
		</transitions>
	</condition>
	<state>
		<name>Process Form</name>
		<metadata>
			<![CDATA[
				{
					"xy": [
						48,
						22
					]
				}
			]]>
		</metadata>
		<actions>
			<action>
				<name>Populate WorkflowContext</name>
				<script>
					<![CDATA[import com.liferay.dynamic.data.mapping.model.DDMFormField;
import com.liferay.dynamic.data.mapping.model.DDMFormInstanceRecordVersion;
import com.liferay.dynamic.data.mapping.model.LocalizedValue;
import com.liferay.dynamic.data.mapping.model.Value;
import com.liferay.dynamic.data.mapping.service.DDMFormInstanceRecordVersionLocalServiceUtil;
import com.liferay.dynamic.data.mapping.storage.DDMFormFieldValue;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.workflow.WorkflowStatusManagerUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import java.util.Locale;

def normaliseValue(String value) {
    if (value == null || "".equals(value)) {
        return value;
    }
    return value.replaceAll("\\[\"","").replaceAll("\"\\]","");
}

final Log logger = LogFactoryUtil.getLog("Supplier Registration - Populate WorkflowContext");

final long recVerId = GetterUtil.getLong((String)workflowContext.get(WorkflowConstants.CONTEXT_ENTRY_CLASS_PK));
final DDMFormInstanceRecordVersion recVer = DDMFormInstanceRecordVersionLocalServiceUtil.getFormInstanceRecordVersion(recVerId);
final Locale locale = recVer.getDDMForm().getDefaultLocale();
final List<DDMFormFieldValue> formFieldVals = recVer.getDDMFormValues().getDDMFormFieldValues();

final List<String> requiredFieldReferences = Arrays.asList("annualTurnover","storageCategory", "productCategory", "supplyOtherRetailers",
   "companyDescription", "uploadDocuments", "productRangeDescription", "productBranded", "previousContact", "companyName", "addressLine1",
   "addressLine2", "city", "region", "postalCode", "country", "contactNumber", "websiteUrl", "companyStructure", "backupContactName", "backEmailAddress");

final Map<String, String> userDataFieldMap = new HashMap<String, String>() {{
    put("Contact Name", "contactName");
    put("Email address", "emailAddress");
}};

final List<String> uploadDocuments = new ArrayList();

for (DDMFormFieldValue fmval : formFieldVals) {
    final DDMFormField formField = fmval.getDDMFormField();
    final String fieldReference = fmval.getFieldReference();
    if ("document_library".equals(formField.getType())) {
        final Value val = fmval.getValue();
        uploadDocuments.add(val.getString(Locale.ROOT));
    } else if (requiredFieldReferences.contains(fieldReference)) {
        final Value val = fmval.getValue();
        final String data = normaliseValue(val.getString(Locale.ROOT));
        logger.info("Adding " + fieldReference + " : " + data + " to the WorkflowContext");
        workflowContext.put(fieldReference, data);
    } else if (fieldReference.contains("UsersDataField")) {
        logger.info("Processing user data field - " + fieldReference);
        final LocalizedValue label = formField.getLabel();
        final String labelText = label.getString(locale);
        if (userDataFieldMap.containsKey(labelText)) {
            final String fieldName = userDataFieldMap.get(labelText);
            final Value val = fmval.getValue();
            final String data = normaliseValue(val.getString(Locale.ROOT));
            logger.info("Adding " + fieldName + " : " + data + " to the WorkflowContext");
            workflowContext.put(fieldName, data);
        } else {
            logger.info("User data field not found");
        }
    }
}

if (uploadDocuments.size() > 0) {
    logger.info("Adding " + uploadDocuments.size() + " to the WorkflowContext");
    workflowContext.put("uploadDocuments", uploadDocuments);
}

workflowContext.put("recVerId", recVerId);
workflowContext.put("locale", locale);
WorkflowStatusManagerUtil.updateStatus(WorkflowConstants.getLabelStatus("pending"), workflowContext);]]>
				</script>
				<script-language>groovy</script-language>
				<execution-type>onEntry</execution-type>
			</action>
			<action>
				<name>Translate Options</name>
				<script>
					<![CDATA[import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.workflow.WorkflowStatusManagerUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

final Log logger = LogFactoryUtil.getLog("Supplier Registration - Translate Options");

try {
    final Map<String, String> storageCategoryMap = new HashMap<String, String>() {{
        put("Option90679298", "Ambient");
    }};

    final String storageCategory = workflowContext.get("storageCategory");
    if (storageCategoryMap.containsKey(storageCategory)) {
        final String newStorageCategory = storageCategoryMap.get(storageCategory);
        logger.info("Updating storageCategory : " + newStorageCategory + " in the WorkflowContext");
        workflowContext.put("storageCategory", newStorageCategory);
    }

    final Map<String, String> productCategoryMap = new HashMap<String, String>() {{
        put("Option85105317", "Drinks & impulse");
    }};

    final String productCategory = workflowContext.get("storageCategory");
    if (productCategoryMap.containsKey(productCategory)) {
        final String newProductCategory = productCategoryMap.get(productCategory);
        logger.info("Updating productCategory : " + newProductCategory + " in the WorkflowContext");
        workflowContext.put("productCategory", newProductCategory);
    }

    final Map<String, String> supplyOtherRetailersMap = new HashMap<String, String>() {{
        put("Option49733699", "None of the above");
    }};

    final String supplyOtherRetailers = workflowContext.get("supplyOtherRetailers");
    if (supplyOtherRetailersMap.containsKey(supplyOtherRetailers)) {
        final String newSupplyOtherRetailers = supplyOtherRetailersMap.get(supplyOtherRetailers);
        logger.info("Updating supplyOtherRetailers : " + newSupplyOtherRetailers + " in the WorkflowContext");
        workflowContext.put("supplyOtherRetailers", newSupplyOtherRetailers);
    }

    WorkflowStatusManagerUtil.updateStatus(WorkflowConstants.getLabelStatus("pending"), workflowContext);
} catch(Exception e) {
  logger.error(e);
  WorkflowStatusManagerUtil.updateStatus(WorkflowConstants.getLabelStatus("incomplete"), workflowContext);
}]]>
				</script>
				<script-language>groovy</script-language>
				<execution-type>onEntry</execution-type>
			</action>
		</actions>
		<initial>true</initial>
		<transitions>
			<transition>
				<name>Application</name>
				<target>Review Application</target>
				<default>true</default>
			</transition>
		</transitions>
	</state>
	<state>
		<name>Reject Application</name>
		<metadata>
			<![CDATA[
				{
					"terminal": true,
					"xy": [
						504,
						412
					]
				}
			]]>
		</metadata>
		<actions>
			<action>
				<name>Application Rejected</name>
				<script>
					<![CDATA[import com.liferay.portal.kernel.workflow.WorkflowStatusManagerUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

WorkflowStatusManagerUtil.updateStatus(WorkflowConstants.getLabelStatus("denied"), workflowContext);]]>
				</script>
				<script-language>groovy</script-language>
				<execution-type>onEntry</execution-type>
			</action>
			<action>
				<name>Update Audit</name>
				<script>
					<![CDATA[import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.model.Company;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.object.service.ObjectEntryLocalServiceUtil;

def audit(final long userId, final String emailAddress, final String supplier, final String action, ServiceContext serviceContext) {
    final groupId = 0;
    final objectDefinitionId = 53145
    final Map<String, Serializable> values = new HashMap<String, Serializable>() {{
        put("entryDate", new Date());
        put("supplier", supplier);
        put("action", action);
        put("userEmail", emailAddress);
    }};
    ObjectEntryLocalServiceUtil.addObjectEntry(userId, groupId, objectDefinitionId, values, serviceContext != null ? serviceContext : new ServiceContext());
}

final Log logger = LogFactoryUtil.getLog("Supplier Application Review - Update Audit");

try {
    final String emailAddress = workflowContext.get("emailAddress");
    final String companyName = workflowContext.get("companyName");
    final String action = "Application rejected";

    final long companyId = Long.parseLong(workflowContext.get("companyId"));
    final User user = UserLocalServiceUtil.fetchUserByEmailAddress(companyId, emailAddress)

    if (user != null) {
        audit(user.getUserId(), user.getEmailAddress(), companyName, action, serviceContext);
    }
} catch (Exception e) {
    logger.error(e);
}]]>
				</script>
				<script-language>groovy</script-language>
				<execution-type>onEntry</execution-type>
			</action>
			<notification>
				<name>Application Rejected</name>
				<description>
					<![CDATA[Application Outcome]]>
				</description>
				<template>
					<![CDATA[Your application has been rejected]]>
				</template>
				<template-language>freemarker</template-language>
				<notification-type>email</notification-type>
				<notification-type>user-notification</notification-type>
				<recipients receptionType="to">
					<user />
				</recipients>
				<execution-type>onEntry</execution-type>
			</notification>
		</actions>
	</state>
	<state>
		<name>Create Organisation</name>
		<metadata>
			<![CDATA[
				{
					"xy": [
						714,
						45
					]
				}
			]]>
		</metadata>
		<actions>
			<action>
				<name>Create Organization</name>
				<script>
					<![CDATA[import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.model.Address;
import com.liferay.portal.kernel.model.Company;
import com.liferay.portal.kernel.model.EmailAddress;
import com.liferay.portal.kernel.model.ListType;
import com.liferay.portal.kernel.model.ListTypeConstants;
import com.liferay.portal.kernel.model.Organization;
import com.liferay.portal.kernel.model.OrganizationConstants;
import com.liferay.portal.kernel.model.Phone;
import com.liferay.portal.kernel.model.Role;
import com.liferay.portal.kernel.model.RoleConstants;
import com.liferay.portal.kernel.model.Website;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.search.Indexer;
import com.liferay.portal.kernel.search.IndexerRegistryUtil;
import com.liferay.portal.kernel.security.auth.PrincipalThreadLocal;
import com.liferay.portal.kernel.security.permission.PermissionChecker;
import com.liferay.portal.kernel.security.permission.PermissionCheckerFactoryUtil;
import com.liferay.portal.kernel.security.permission.PermissionThreadLocal;
import com.liferay.portal.kernel.service.CompanyLocalServiceUtil;
import com.liferay.portal.kernel.service.ListTypeLocalServiceUtil;
import com.liferay.portal.kernel.service.OrganizationLocalServiceUtil;
import com.liferay.portal.kernel.service.OrganizationServiceUtil;
import com.liferay.portal.kernel.service.RoleLocalServiceUtil;
import com.liferay.portal.kernel.service.UserGroupRoleLocalServiceUtil;
import com.liferay.portal.kernel.service.UserGroupRoleServiceUtil;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.workflow.WorkflowStatusManagerUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.portal.model.impl.AddressImpl;
import com.liferay.portal.model.impl.EmailAddressImpl;
import com.liferay.portal.model.impl.PhoneImpl;
import com.liferay.portal.model.impl.WebsiteImpl;

def getTypdId(String name, String type) {
    final Log logger = LogFactoryUtil.getLog("Create Organization - getTypeId");

    logger.info("Looking for " + name + " in " + type);
    ListType listType = ListTypeLocalServiceUtil.getListType(name, type);
    long id = 0;
    if (listType != null) {
        id = listType.getListTypeId();
    }
    logger.info("Returning id " + id);
    return id;
}

def wrap(long value) {
    def valueArray = new long[1];
    valueArray[0] = value;
    return valueArray;
}

final Log logger = LogFactoryUtil.getLog("Create Organization");

try {
    final long userId = GetterUtil.getLong((String)workflowContext.get(WorkflowConstants.CONTEXT_USER_ID));
    final long companyId = Long.parseLong(workflowContext.get("companyId"));
    final long groupId = Long.parseLong(workflowContext.get("groupId"));

    final User user = UserLocalServiceUtil.fetchUserByEmailAddress(companyId, "admin@ocado.com");

    PermissionChecker adminChecker = PermissionCheckerFactoryUtil.create(user);
    PermissionThreadLocal.setPermissionChecker(adminChecker);

    PrincipalThreadLocal.setName(user.getUserId());

    final Company company = CompanyLocalServiceUtil.getCompany(companyId);
    final String emailAddressStr = workflowContext.get("emailAddress");

    logger.info("Processing for " + emailAddressStr);

    final Address address = new AddressImpl();
    address.setStreet1(workflowContext.get("addressLine1"));
    address.setStreet2(workflowContext.get("addressLine2"));
    address.setCity(workflowContext.get("city"));
    address.setTypeId(getTypdId("other", ListTypeConstants.ORGANIZATION_ADDRESS));

    final EmailAddress emailAddress = new EmailAddressImpl();
    emailAddress.setAddress(emailAddressStr);
    emailAddress.setTypeId(getTypdId("email-address", ListTypeConstants.ORGANIZATION_EMAIL_ADDRESS));

    final Phone phone = new PhoneImpl();
    phone.setNumber(workflowContext.get("contactNumber"));
    phone.setTypeId(getTypdId("other", ListTypeConstants.ORGANIZATION_PHONE));

    final Website website = new WebsiteImpl();
    website.setUrl(workflowContext.get("websiteUrl"));
    website.setTypeId(getTypdId("public", ListTypeConstants.ORGANIZATION_WEBSITE));

    final long parentOrganizationId = OrganizationConstants.DEFAULT_PARENT_ORGANIZATION_ID;
    final String companyName = workflowContext.get("companyName");
    final String type = OrganizationConstants.TYPE_ORGANIZATION;
    final long regionId = 21519; // Warwickshire
    final long countryId = 21316; // United Kingdom
    final long statusId = ListTypeConstants.ORGANIZATION_STATUS_DEFAULT;

    final organizationId = OrganizationLocalServiceUtil.getOrganizationId(companyId, companyName);
    if (organizationId > 0)
    {
        logger.info("An organisation with that name already exists - " + companyName + "[" + organizationId + "]");
        WorkflowStatusManagerUtil.updateStatus(WorkflowConstants.getLabelStatus("incomplete"), workflowContext);
        return;
    }

    final Organization organization =
            OrganizationServiceUtil.addOrganization(parentOrganizationId, companyName, type, regionId, countryId, statusId, null, true,
                                                        Arrays.asList(address),  Arrays.asList(emailAddress), Collections.emptyList(),
                                                        Arrays.asList(phone),  Arrays.asList(website), serviceContext);

    final User supplier = UserLocalServiceUtil.fetchUserByEmailAddress(companyId, emailAddressStr);

    if (organization != null) {
        logger.info("Adding " + emailAddressStr + " to " + organization.getName() + "[" + organization.getOrganizationId() + "]");
        OrganizationServiceUtil.addOrganizationUserByEmailAddress(emailAddressStr, organization.getOrganizationId(), serviceContext);
        final Role orgAdminRole = RoleLocalServiceUtil.getRole(companyId, RoleConstants.ORGANIZATION_ADMINISTRATOR)
        logger.info("Adding " + emailAddressStr + " to " + RoleConstants.ORGANIZATION_ADMINISTRATOR + "[" + orgAdminRole.getRoleId() + "]");

        UserGroupRoleServiceUtil.addUserGroupRoles(supplier.getUserId(), organization.getGroupId(), wrap(orgAdminRole.getRoleId()));
    } else {
        logger.info("The organization object has a null value");
    }

    final String supplierAccountManagerRoleName = "Supplier Account Manager (Site Role)";
    final Role supplierAccountManagerRole = RoleLocalServiceUtil.getRole(companyId, supplierAccountManagerRoleName);
    logger.info("Adding " + emailAddressStr + " to " + supplierAccountManagerRoleName + "[" + supplierAccountManagerRole.getRoleId() + "]");

    UserGroupRoleServiceUtil.addUserGroupRoles(supplier.getUserId(), groupId, wrap(supplierAccountManagerRole.getRoleId()));

    // Indexer
    if ((serviceContext == null) || serviceContext.isIndexingEnabled()) {
        Indexer<User> indexer = IndexerRegistryUtil.nullSafeGetIndexer(
            User.class);

        indexer.reindex(supplier);
    }

    WorkflowStatusManagerUtil.updateStatus(WorkflowConstants.getLabelStatus("pending"), workflowContext);
} catch(Exception e) {
    logger.error(e);
    WorkflowStatusManagerUtil.updateStatus(WorkflowConstants.getLabelStatus("incomplete"), workflowContext);
}]]>
				</script>
				<script-language>groovy</script-language>
				<execution-type>onEntry</execution-type>
			</action>
			<action>
				<name>Update Audit</name>
				<script>
					<![CDATA[import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.model.Company;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.object.service.ObjectEntryLocalServiceUtil;

def audit(final long userId, final String emailAddress, final String supplier, final String action, ServiceContext serviceContext) {
    final groupId = 0;
    final objectDefinitionId = 53145
    final Map<String, Serializable> values = new HashMap<String, Serializable>() {{
        put("entryDate", new Date());
        put("supplier", supplier);
        put("action", action);
        put("userEmail", emailAddress);
    }};
    ObjectEntryLocalServiceUtil.addObjectEntry(userId, groupId, objectDefinitionId, values, serviceContext != null ? serviceContext : new ServiceContext());
}

final Log logger = LogFactoryUtil.getLog("Supplier Application Review - Update Audit");

try {
    final String emailAddress = workflowContext.get("emailAddress");
    final String companyName = workflowContext.get("companyName");
    final String action = "Supplier organisation created";

    final long companyId = Long.parseLong(workflowContext.get("companyId"));
    final User user = UserLocalServiceUtil.fetchUserByEmailAddress(companyId, emailAddress)

    if (user != null) {
        audit(user.getUserId(), user.getEmailAddress(), companyName, action, serviceContext);
    }
} catch (Exception e) {
    logger.error(e);
}]]>
				</script>
				<script-language>groovy</script-language>
				<execution-type>onExit</execution-type>
			</action>
		</actions>
		<transitions>
			<transition>
				<name>Continue</name>
				<target>Organisation Error Check</target>
				<default>true</default>
			</transition>
		</transitions>
	</state>
	<state>
		<name>Approve Application</name>
		<metadata>
			<![CDATA[
				{
					"terminal": true,
					"xy": [
						612,
						492
					]
				}
			]]>
		</metadata>
		<actions>
			<action>
				<name>Application Approved</name>
				<script>
					<![CDATA[import com.liferay.portal.kernel.workflow.WorkflowStatusManagerUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

WorkflowStatusManagerUtil.updateStatus(WorkflowConstants.getLabelStatus("approved"), workflowContext);]]>
				</script>
				<script-language>groovy</script-language>
				<execution-type>onEntry</execution-type>
			</action>
			<action>
				<name>Update Audit</name>
				<script>
					<![CDATA[import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.model.Company;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.object.service.ObjectEntryLocalServiceUtil;

def audit(final long userId, final String emailAddress, final String supplier, final String action, ServiceContext serviceContext) {
    final groupId = 0;
    final objectDefinitionId = 53145
    final Map<String, Serializable> values = new HashMap<String, Serializable>() {{
        put("entryDate", new Date());
        put("supplier", supplier);
        put("action", action);
        put("userEmail", emailAddress);
    }};
    ObjectEntryLocalServiceUtil.addObjectEntry(userId, groupId, objectDefinitionId, values, serviceContext != null ? serviceContext : new ServiceContext());
}

final Log logger = LogFactoryUtil.getLog("Supplier Application Review - Update Audit");

try {
    final String emailAddress = workflowContext.get("emailAddress");
    final String companyName = workflowContext.get("companyName");
    final String action = "Application approved";

    final long companyId = Long.parseLong(workflowContext.get("companyId"));
    final User user = UserLocalServiceUtil.fetchUserByEmailAddress(companyId, emailAddress)

    if (user != null) {
        audit(user.getUserId(), user.getEmailAddress(), companyName, action, serviceContext);
    }
} catch (Exception e) {
    logger.error(e);
}]]>
				</script>
				<script-language>groovy</script-language>
				<execution-type>onEntry</execution-type>
			</action>
			<notification>
				<name>Application Approved</name>
				<description>
					<![CDATA[Application Outcome]]>
				</description>
				<template>
					<![CDATA[Your application has been approved]]>
				</template>
				<template-language>freemarker</template-language>
				<notification-type>email</notification-type>
				<notification-type>user-notification</notification-type>
				<recipients receptionType="to">
					<user />
				</recipients>
				<execution-type>onEntry</execution-type>
			</notification>
		</actions>
	</state>
	<state>
		<name>Application Withdrawn</name>
		<metadata>
			<![CDATA[
				{
					"xy": [
						298.5,
						411
					]
				}
			]]>
		</metadata>
		<actions>
			<action>
				<name>Update Audit</name>
				<script>
					<![CDATA[import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.model.Company;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.object.service.ObjectEntryLocalServiceUtil;

def audit(final long userId, final String emailAddress, final String supplier, final String action, ServiceContext serviceContext) {
    final groupId = 0;
    final objectDefinitionId = 53145
    final Map<String, Serializable> values = new HashMap<String, Serializable>() {{
        put("entryDate", new Date());
        put("supplier", supplier);
        put("action", action);
        put("userEmail", emailAddress);
    }};
    ObjectEntryLocalServiceUtil.addObjectEntry(userId, groupId, objectDefinitionId, values, serviceContext != null ? serviceContext : new ServiceContext());
}

final Log logger = LogFactoryUtil.getLog("Supplier Application Review - Update Audit");

try {
    final String emailAddress = workflowContext.get("emailAddress");
    final String companyName = workflowContext.get("companyName");
    final String action = "Application withdrawn";

    final long companyId = Long.parseLong(workflowContext.get("companyId"));
    final User user = UserLocalServiceUtil.fetchUserByEmailAddress(companyId, emailAddress)

    if (user != null) {
        audit(user.getUserId(), user.getEmailAddress(), companyName, action, serviceContext);
    }
} catch (Exception e) {
    logger.error(e);
}]]>
				</script>
				<script-language>groovy</script-language>
				<execution-type>onExit</execution-type>
			</action>
			<notification>
				<name>Application Withdrawn</name>
				<description>
					<![CDATA[Application Withdrawn]]>
				</description>
				<template>
					<![CDATA[{companyName} have withdrawn their application]]>
				</template>
				<template-language>freemarker</template-language>
				<notification-type>user-notification</notification-type>
				<recipients receptionType="to">
					<roles>
						<role><role-id>43967</role-id></role>
					</roles>
				</recipients>
				<execution-type>onEntry</execution-type>
			</notification>
		</actions>
		<transitions>
			<transition>
				<name>Withdrawn</name>
				<target>Reject Application</target>
				<default>true</default>
			</transition>
		</transitions>
	</state>
	<state>
		<name>Process Documents</name>
		<metadata>
			<![CDATA[
				{
					"xy": [
						591.5,
						314
					]
				}
			]]>
		</metadata>
		<actions>
			<action>
				<name>Process Documents</name>
				<script>
					<![CDATA[import com.liferay.document.library.kernel.service.DLAppLocalServiceUtil;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.repository.model.Folder;
import com.liferay.portal.kernel.repository.model.FileEntry;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.workflow.WorkflowStatusManagerUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import com.fasterxml.jackson.databind.ObjectMapper;

final Log logger = LogFactoryUtil.getLog("Supplier Application Review - Process Documents");

try {
    final long companyId = Long.parseLong(workflowContext.get("companyId"));
    final long groupId = Long.parseLong(workflowContext.get("groupId"));
    final String emailAddress = workflowContext.get("emailAddress");
    final List<String> uploadDocuments = workflowContext.get("uploadDocuments");

    final User supplier = UserLocalServiceUtil.getUserByEmailAddress(companyId, emailAddress);

    final String companyName = workflowContext.get("companyName");

    final Folder supplierSubmissionsFolder = DLAppLocalServiceUtil.getFolder(groupId, 0, "Supplier Submissions");

    Folder companyFolder;
    try {
        companyFolder = DLAppLocalServiceUtil.getFolder(groupId, supplierSubmissionsFolder.getFolderId(), companyName);
        logger.info("Submissions folder already exists for " + companyName);
    } catch(com.liferay.document.library.kernel.exception.NoSuchFolderException nsfe) {
        logger.info("Creating new folder for " + companyName);
        final String folderDescription = "Documents provided by " + companyName + " on applying to become a supplier.";
        companyFolder = DLAppLocalServiceUtil.addFolder(supplier.getUserId(), groupId, supplierSubmissionsFolder.getFolderId(), companyName, folderDescription, serviceContext);
    }

    if (uploadDocuments.size() > 0) {
        final ObjectMapper objectMapper = new ObjectMapper();
        for(String document : uploadDocuments) {
            logger.info(document);
            try {
                Map<String, String> documentMap = objectMapper.readValue(document, Map.class);
                logger.info("documentMap is " + documentMap);
                long fileEntryId = Long.parseLong(documentMap.get("fileEntryId"));
                logger.info("fileEntryId is " + fileEntryId);
                final FileEntry fileEntry =  DLAppLocalServiceUtil.moveFileEntry(supplier.getUserId(), fileEntryId, companyFolder.getFolderId(), serviceContext);
                logger.info(fileEntry);
            }
            catch (Exception e) {
               logger.error(e);
            }
        }
    }

    WorkflowStatusManagerUtil.updateStatus(WorkflowConstants.getLabelStatus("pending"), workflowContext);
} catch(Exception e) {
    logger.error(e);
    WorkflowStatusManagerUtil.updateStatus(WorkflowConstants.getLabelStatus("incomplete"), workflowContext);
}]]>
				</script>
				<script-language>groovy</script-language>
				<execution-type>onEntry</execution-type>
			</action>
			<action>
				<name>Update Audit</name>
				<script>
					<![CDATA[import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.model.Company;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.object.service.ObjectEntryLocalServiceUtil;

def audit(final long userId, final String emailAddress, final String supplier, final String action, ServiceContext serviceContext) {
    final groupId = 0;
    final objectDefinitionId = 53145
    final Map<String, Serializable> values = new HashMap<String, Serializable>() {{
        put("entryDate", new Date());
        put("supplier", supplier);
        put("action", action);
        put("userEmail", emailAddress);
    }};
    ObjectEntryLocalServiceUtil.addObjectEntry(userId, groupId, objectDefinitionId, values, serviceContext != null ? serviceContext : new ServiceContext());
}

final Log logger = LogFactoryUtil.getLog("Supplier Application Review - Update Audit");

try {
    final String emailAddress = workflowContext.get("emailAddress");
    final String companyName = workflowContext.get("companyName");
    final String action = "Supplier documents archived";

    final long companyId = Long.parseLong(workflowContext.get("companyId"));
    final User user = UserLocalServiceUtil.fetchUserByEmailAddress(companyId, emailAddress)

    if (user != null) {
        audit(user.getUserId(), user.getEmailAddress(), companyName, action, serviceContext);
    }
} catch (Exception e) {
    logger.error(e);
}]]>
				</script>
				<script-language>groovy</script-language>
				<execution-type>onExit</execution-type>
			</action>
		</actions>
		<transitions>
			<transition>
				<name>Approved</name>
				<target>Approve Application</target>
				<default>true</default>
			</transition>
		</transitions>
	</state>
	<state>
		<name>Report Error</name>
		<metadata>
			<![CDATA[
				{
					"terminal": true,
					"xy": [
						775,
						492
					]
				}
			]]>
		</metadata>
		<actions>
			<notification>
				<name>Report Error</name>
				<description>
					<![CDATA[Supplier application error]]>
				</description>
				<template>
					<![CDATA[An error occurred when processing supplier application for ${companyName}]]>
				</template>
				<template-language>freemarker</template-language>
				<notification-type>email</notification-type>
				<notification-type>user-notification</notification-type>
				<recipients receptionType="to">
					<roles>
						<role>
							<role-type>site</role-type>
							<name>ORL Buying</name>
							<auto-create>false</auto-create>
						</role>
					</roles>
				</recipients>
				<execution-type>onEntry</execution-type>
			</notification>
		</actions>
	</state>
	<task>
		<name>Review Application</name>
		<metadata>
			<![CDATA[
				{
					"xy": [
						224,
						108
					]
				}
			]]>
		</metadata>
		<actions>
			<action>
				<name>Mark Application As Submitted</name>
				<script>
					<![CDATA[import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.security.permission.PermissionChecker;
import com.liferay.portal.kernel.security.permission.PermissionCheckerFactoryUtil;
import com.liferay.portal.kernel.security.permission.PermissionThreadLocal;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.workflow.WorkflowStatusManagerUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import java.util.Locale;

final Log logger = LogFactoryUtil.getLog("Supplier Application Review - Mark Application As Submitted");

final long userId = GetterUtil.getLong((String)workflowContext.get(WorkflowConstants.CONTEXT_USER_ID));

try {
  final User supplierUser = UserLocalServiceUtil.getUser(userId);

  PermissionChecker checker = PermissionCheckerFactoryUtil.create(supplierUser);
  PermissionThreadLocal.setPermissionChecker(checker);

  ExpandoBridge userExpandoBridge = supplierUser.getExpandoBridge();

  final String applicationSubmitted = "Application Submitted";
  if (userExpandoBridge.hasAttribute(applicationSubmitted)) {
    logger.info("Mark user has having submitted application");
    userExpandoBridge.setAttribute(applicationSubmitted, true);
  }

  UserLocalServiceUtil.updateUser(supplierUser);
  WorkflowStatusManagerUtil.updateStatus(WorkflowConstants.getLabelStatus("pending"), workflowContext);
} catch(Exception e) {
  logger.error(e);
  WorkflowStatusManagerUtil.updateStatus(WorkflowConstants.getLabelStatus("incomplete"), workflowContext);
}]]>
				</script>
				<script-language>groovy</script-language>
				<execution-type>onEntry</execution-type>
			</action>
			<action>
				<name>Update Audit</name>
				<script>
					<![CDATA[import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.model.Company;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.object.service.ObjectEntryLocalServiceUtil;

def audit(final long userId, final String emailAddress, final String supplier, final String action, ServiceContext serviceContext) {
    final groupId = 0;
    final objectDefinitionId = 53145
    final Map<String, Serializable> values = new HashMap<String, Serializable>() {{
        put("entryDate", new Date());
        put("supplier", supplier);
        put("action", action);
        put("userEmail", emailAddress);
    }};
    ObjectEntryLocalServiceUtil.addObjectEntry(userId, groupId, objectDefinitionId, values, serviceContext != null ? serviceContext : new ServiceContext());
}

final Log logger = LogFactoryUtil.getLog("Supplier Application Review - Update Audit");

try {
    final String emailAddress = workflowContext.get("emailAddress");
    final String companyName = workflowContext.get("companyName");
    final String action = "Supplier application received";

    final long companyId = Long.parseLong(workflowContext.get("companyId"));
    final User user = UserLocalServiceUtil.fetchUserByEmailAddress(companyId, emailAddress)

    if (user != null) {
        audit(user.getUserId(), user.getEmailAddress(), companyName, action, serviceContext);
    }
} catch (Exception e) {
    logger.error(e);
}]]>
				</script>
				<script-language>groovy</script-language>
				<execution-type>onEntry</execution-type>
			</action>
			<notification>
				<name>Notify Buying Team</name>
				<description>
					<![CDATA[Received Supplier Application]]>
				</description>
				<template>
					<![CDATA[We have received a new supplier application from ${companyName}.]]>
				</template>
				<template-language>freemarker</template-language>
				<notification-type>email</notification-type>
				<notification-type>user-notification</notification-type>
				<recipients receptionType="to">
					<roles>
						<role>
							<role-type>site</role-type>
							<name>ORL Buying</name>
							<auto-create>false</auto-create>
						</role>
					</roles>
				</recipients>
				<execution-type>onAssignment</execution-type>
			</notification>
			<notification>
				<name>Notify Supplier</name>
				<description>
					<![CDATA[Application Received]]>
				</description>
				<template>
					<![CDATA[We have received your application. It will be reviewed by one of our team.]]>
				</template>
				<template-language>freemarker</template-language>
				<notification-type>email</notification-type>
				<notification-type>user-notification</notification-type>
				<recipients receptionType="to">
					<user />
				</recipients>
				<execution-type>onEntry</execution-type>
			</notification>
		</actions>
		<assignments>
			<roles>
				<role>
					<role-type>site</role-type>
					<name>ORL Buying</name>
					<auto-create>false</auto-create>
				</role>
			</roles>
		</assignments>
		<transitions>
			<transition>
				<name>Requires Clarification</name>
				<target>Further Clarification</target>
				<default>true</default>
			</transition>
			<transition>
				<name>Arrange Meeting</name>
				<target>Post Meeting Review</target>
				<default>false</default>
			</transition>
			<transition>
				<name>Reject</name>
				<target>Reject Application</target>
				<default>false</default>
			</transition>
		</transitions>
	</task>
	<task>
		<name>Further Clarification</name>
		<metadata>
			<![CDATA[
				{
					"xy": [
						48,
						388
					]
				}
			]]>
		</metadata>
		<actions>
			<action>
				<name>Update Audit</name>
				<script>
					<![CDATA[import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.model.Company;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.object.service.ObjectEntryLocalServiceUtil;

def audit(final long userId, final String emailAddress, final String supplier, final String action, ServiceContext serviceContext) {
    final groupId = 0;
    final objectDefinitionId = 53145
    final Map<String, Serializable> values = new HashMap<String, Serializable>() {{
        put("entryDate", new Date());
        put("supplier", supplier);
        put("action", action);
        put("userEmail", emailAddress);
    }};
    ObjectEntryLocalServiceUtil.addObjectEntry(userId, groupId, objectDefinitionId, values, serviceContext != null ? serviceContext : new ServiceContext());
}

final Log logger = LogFactoryUtil.getLog("Supplier Application Review - Update Audit");

try {
    final String emailAddress = workflowContext.get("emailAddress");
    final String companyName = workflowContext.get("companyName");
    final String action = "Further clarification requested";

    final long companyId = Long.parseLong(workflowContext.get("companyId"));
    final User user = UserLocalServiceUtil.fetchUserByEmailAddress(companyId, emailAddress)

    if (user != null) {
        audit(user.getUserId(), user.getEmailAddress(), companyName, action, serviceContext);
    }
} catch (Exception e) {
    logger.error(e);
}]]>
				</script>
				<script-language>groovy</script-language>
				<execution-type>onEntry</execution-type>
			</action>
			<notification>
				<name>Further Clarification</name>
				<description>
					<![CDATA[Further Information Required]]>
				</description>
				<template>
					<![CDATA[Thank you for your application. It has been reviewed by one of the team and they require further clarification before they can process your application.]]>
				</template>
				<template-language>freemarker</template-language>
				<notification-type>email</notification-type>
				<notification-type>user-notification</notification-type>
				<recipients receptionType="to">
					<user />
				</recipients>
				<execution-type>onAssignment</execution-type>
			</notification>
		</actions>
		<assignments>
			<user />
		</assignments>
		<transitions>
			<transition>
				<name>Resubmit</name>
				<target>Review Application</target>
				<default>true</default>
			</transition>
			<transition>
				<name>Withdraw</name>
				<target>Application Withdrawn</target>
				<default>false</default>
			</transition>
		</transitions>
	</task>
	<task>
		<name>Post Meeting Review</name>
		<metadata>
			<![CDATA[
				{
					"xy": [
						491,
						79
					]
				}
			]]>
		</metadata>
		<actions>
			<action>
				<name>Update Audit</name>
				<script>
					<![CDATA[import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.model.Company;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.object.service.ObjectEntryLocalServiceUtil;

def audit(final long userId, final String emailAddress, final String supplier, final String action, ServiceContext serviceContext) {
    final groupId = 0;
    final objectDefinitionId = 53145
    final Map<String, Serializable> values = new HashMap<String, Serializable>() {{
        put("entryDate", new Date());
        put("supplier", supplier);
        put("action", action);
        put("userEmail", emailAddress);
    }};
    ObjectEntryLocalServiceUtil.addObjectEntry(userId, groupId, objectDefinitionId, values, serviceContext != null ? serviceContext : new ServiceContext());
}

final Log logger = LogFactoryUtil.getLog("Supplier Application Review - Update Audit");

try {
    final String emailAddress = workflowContext.get("emailAddress");
    final String companyName = workflowContext.get("companyName");
    final String action = "Site meeting requested";

    final long companyId = Long.parseLong(workflowContext.get("companyId"));
    final User user = UserLocalServiceUtil.fetchUserByEmailAddress(companyId, emailAddress)

    if (user != null) {
        audit(user.getUserId(), user.getEmailAddress(), companyName, action, serviceContext);
    }
} catch (Exception e) {
    logger.error(e);
}]]>
				</script>
				<script-language>groovy</script-language>
				<execution-type>onEntry</execution-type>
			</action>
			<notification>
				<name>Book Meeting</name>
				<description>
					<![CDATA[Time to meet]]>
				</description>
				<template>
					<![CDATA[Thank you for submitting your application. It has been reviewed by our team.

We now require an in person meeting. One of our team will be in touch.]]>
				</template>
				<template-language>freemarker</template-language>
				<notification-type>email</notification-type>
				<notification-type>user-notification</notification-type>
				<recipients receptionType="to">
					<user />
				</recipients>
				<execution-type>onAssignment</execution-type>
			</notification>
			<notification>
				<name>Post Meeting Review</name>
				<description>
					<![CDATA[Post Meeting Review]]>
				</description>
				<template>
					<![CDATA[Post meeting review for ${companyName}]]>
				</template>
				<template-language>freemarker</template-language>
				<notification-type>user-notification</notification-type>
				<recipients receptionType="to">
					<roles>
						<role><role-id>43967</role-id></role>
					</roles>
				</recipients>
				<execution-type>onAssignment</execution-type>
			</notification>
		</actions>
		<assignments>
			<scripted-assignment>
				<script>
					<![CDATA[import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

final Log logger = LogFactoryUtil.getLog("Supplier Application Review - Reassign reviewer");

final long buyerUserId = Long.parseLong(workflowContext.get(WorkflowConstants.CONTEXT_USER_ID));
final User buyerUser =  UserLocalServiceUtil.fetchUserById(buyerUserId);

logger.info("Re-assigning workflow to " + buyerUser.getEmailAddress());

user = buyerUser;
roles = null;]]>
				</script>
				<script-language>groovy</script-language>
			</scripted-assignment>
		</assignments>
		<transitions>
			<transition>
				<name>Reject</name>
				<target>Reject Application</target>
				<default>true</default>
			</transition>
			<transition>
				<name>Approve</name>
				<target>Create Organisation</target>
				<default>false</default>
			</transition>
		</transitions>
	</task>
</workflow-definition>